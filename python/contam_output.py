"""
General Python class for creating and reading CONTAM SIM (simulation) files.

Created on Fri Oct  7 20:58:55 2016

@author: Von P. Walden
         Washington State University
         Laboratory for Atmospheric Research
"""
class Contam:
    """This class defines methods (functions) for reading the simulation (SIM)
    files generated by NIST's CONTAM program. CONTAM is a computer program
    for analyzing air quality and ventilation in indoor environments.
           
    Information on CONTAM can can be found at: 
        https://www.nist.gov/services-resources/software/contam.
        
        Example usage:
            # Initialize and read the "Ambient" meteorology and contaminant data.
            import contam
            filename = '/Users/vonw/data/iaq/contam/House_002_Test.sim'
            sim      = contam.Contam(filename)
            ambient  = sim.readAmbient()
            
        Plotting example:
            # import both numpy and matplotlib
            %pylab 
            
            # Plot ambient temperature
            figure()
            ambient.Tambt.plot()
            
            # Plot ambient pressure
            figure()
            ambient.P.plot()
            
            # Plot ambient wind speed
            figure()
            ambient.Ws.plot()
            
            # Plot ambient wind direction
            figure()
            ambient.Wd.plot()
            
            # Plot ambient contaminants
            figure()
            ambient.iloc[:,4:].plot()
            legend(loc='center left', bbox_to_anchor=(1, 0.5),fontsize = 'x-small')
    """
    def __init__(self, filename):
        """INITIAL: Initializes the Contam processing object with the desired
                    simulation (SIM) filename.
        
                    Inputs:
                        filename - simulation (SIM) filename
                        
                    Written by  Von P. Walden, Washington State University
                                7 October 2016
        """
        import numpy    as     np
        import pandas   as     pd
        
        self.filename = filename
        self.fp = open(self.filename,'rb')
        
        # File Format (binary):
        #   The first 16 lines of the simulation results file contain data 
        #   (32-bit integers) to help assure that the results apply to the 
        #   project file currently in ContamW and to set the array sizes
        #   necessary to process the results.
        self.header = {'version_number': np.fromfile(self.fp,'i4',1)[0],
                       'nzone'         : np.fromfile(self.fp,'i4',1)[0],
                       'npath'         : np.fromfile(self.fp,'i4',1)[0],
                       'nctm'          : np.fromfile(self.fp,'i4',1)[0],
                       'njct'          : np.fromfile(self.fp,'i4',1)[0],
                       'ndct'          : np.fromfile(self.fp,'i4',1)[0],
                       'time_list'     : np.fromfile(self.fp,'i4',1)[0],
                       'date_0'        : np.fromfile(self.fp,'i4',1)[0],
                       'time_0'        : np.fromfile(self.fp,'i4',1)[0],
                       'date_1'        : np.fromfile(self.fp,'i4',1)[0],
                       'time_1'        : np.fromfile(self.fp,'i4',1)[0],
                       'pfsave'        : np.fromfile(self.fp,'i4',1)[0],
                       'zfsave'        : np.fromfile(self.fp,'i4',1)[0],
                       'zcsave'        : np.fromfile(self.fp,'i4',1)[0],
                       'nafnd'         : np.fromfile(self.fp,'i4',1)[0],
                       'nccnd'         : np.fromfile(self.fp,'i4',1)[0],
                       'nafpt'         : np.fromfile(self.fp,'i4',1)[0]}
        
        # Determine time scale of contam simulation
        self.header['beginning_time']    = pd.datetime.strptime(str(self.header['date_0']),'%j') + pd.to_timedelta(self.header['time_0'],'s')
        self.header['ending_time']       = pd.datetime.strptime(str(self.header['date_1']),'%j') + pd.to_timedelta(self.header['time_1'],'s')
        self.header['time_delta']        = pd.to_timedelta(self.header['time_list'],'s')
        self.header['numberOfTimeSteps'] = int((self.header['ending_time']-self.header['beginning_time']).total_seconds() / self.header['time_delta'].total_seconds()) 
        
        # This is followed by _nafnd lines of airflow node cross-reference data:
        self.airflow_node            = {}
        self.airflow_node['typ']     = np.fromfile(self.fp,'i4',self.header['nafnd'])
        self.airflow_node['nr']      = np.fromfile(self.fp,'i4',self.header['nafnd'])
        
        # The next _nafnd lines give the contaminant node cross-reference data:
        self.contaminant_node        = {}
        self.contaminant_node['typ'] = np.fromfile(self.fp,'i4',self.header['nafnd'])
        self.contaminant_node['nr']  = np.fromfile(self.fp,'i4',self.header['nafnd'])
        
        # The next _nafpt lines give the airflow path cross-reference data:
        self.airflow_path            = {}
        self.airflow_path['typ']     = np.fromfile(self.fp,'i4',self.header['nafpt'])
        self.airflow_path['nr']      = np.fromfile(self.fp,'i4',self.header['nafpt'])
        
        # Create a time index to use for creating pandas DataFrames.
        self.index                   = pd.date_range(self.header['beginning_time'], periods=self.header['numberOfTimeSteps'], freq=self.header['time_delta'])
        
        # Create variable that designates time steps where the day changes.
        self.dayChange               = np.where(np.diff(self.index.day))[0] + 1

        # Determine the size (in bytes) of the sections of data in time step.
        self.ambientSize             = (2*2) + (5*4) + (self.header['nctm']*4)
        self.airflowPathSize         = (4*4*self.header['nafpt'])
        self.airflowNodeSize         = (4*4*(self.header['nafnd']-1))
        self.contaminantNodeSize     = ((1*4) + self.header['nctm']*4)*(self.header['nccnd']-1)
        self.dataRecordSize          = self.ambientSize + self.airflowPathSize + self.airflowNodeSize + self.contaminantNodeSize

        # Create variable that documents the byte position at the end of the header.
        self.startOfData             = self.fp.tell()
        
        return
    
    def readAmbient(self):
        """Function to read the ambient meteorology and contaminant data at
            each time step in the CONTAM simulation (SIM) file.
        
        Written by  Von P. Walden, Washington State University
                     7 October 2016
                    26 March   2018 - Made vast improvements to speed by reading
                                        blocks of data using np.fromfile instead
                                        of decoding each value; duh...
        """
        import numpy  as np
        import pandas as pd
        
        # Reset the file pointer at the beginning of the data.
        self.fp.seek(self.startOfData)
        
        # Read the ambient meteorology and contaminant data.
        data = []
        for timeStep in range(self.header['numberOfTimeSteps']):
            if any(timeStep==self.dayChange):
                # Skips two full data records; 24th hour of day + Summary data
                self.fp.seek(2*self.dataRecordSize,1)    # Skips two full data records; 24th hour of day + Summary data
            # Skips 8 bytes for date/time info.
            self.fp.seek(8,1)
            # Read one row of Ambient data
            data.append(np.fromfile(self.fp,'f4',4+self.header['nctm']))                        
            self.fp.seek(self.airflowPathSize + self.airflowNodeSize + self.contaminantNodeSize,1)
        
        # Places the data into a pandas dataframe, which is returned.
        return(pd.DataFrame(data=data, columns=['Tambt','P','Ws','Wd']+['Ctm'+str(n+1) for n in range(self.header['nctm'])], index=self.index))
    
    def readAirflowPaths(self):
        """Function to read the airflow path data at
            each time step in the CONTAM simulation (SIM) file.
        
        Written by  Von P. Walden, Washington State University
                    28 October 2016
                    26 March   2018 - Made vast improvements to speed by reading
                                        blocks of data using np.fromfile instead
                                        of decoding each value; duh...
        """
        import numpy  as np
        import pandas as pd
        
        # Reset the file pointer at the beginning of the data.
        self.fp.seek(self.startOfData)
        
        # Read the ambient meteorology and contaminant data.
        dP    = []
        Flow0 = []
        Flow1 = []
        for timeStep in range(self.header['numberOfTimeSteps']):
            if any(timeStep==self.dayChange):
                # Skips two full data records; 24th hour of day + Summary data
                self.fp.seek(2*self.dataRecordSize,1)    
            # Skips ambient data record.
            self.fp.seek(self.ambientSize,1)
            # Extract rows of data for fp#, dP, Flow0, and Flow1.
            temp = np.fromfile(self.fp,'f4',4*self.header['nafpt']).reshape(self.header['nafpt'],4)
            dP.append(temp[:,1])
            Flow0.append(temp[:,2])
            Flow1.append(temp[:,3])
            self.fp.seek(self.airflowNodeSize + self.contaminantNodeSize,1)
        
        # Places the data into a Python dictionary that contains pandas dataframes.
        return({'dP':    pd.DataFrame(data=dP,   columns=['afpt'+str(j+1) for j in range(self.header['nafpt'])],index=self.index), 
                'Flow0': pd.DataFrame(data=Flow0,columns=['afpt'+str(j+1) for j in range(self.header['nafpt'])],index=self.index), 
                'Flow1': pd.DataFrame(data=Flow1,columns=['afpt'+str(j+1) for j in range(self.header['nafpt'])],index=self.index)})
    
    def readAirflowNodes(self):
        """Function to read the airflow node data at
            each time step in the CONTAM simulation (SIM) file.
        
        Written by  Von P. Walden, Washington State University
                    28 October 2016
                    26 March   2018 - Made vast improvements to speed by reading
                                        blocks of data using np.fromfile instead
                                        of decoding each value; duh...
        """
        import numpy  as np
        import pandas as pd
        
        # Reset the file pointer at the beginning of the data.
        self.fp.seek(self.startOfData)
        
        T = []
        P = []
        D = []
        for timeStep in range(self.header['numberOfTimeSteps']):
            if any(timeStep==self.dayChange):
                # Skips two full data records; 24th hour of day + Summary data
                self.fp.seek(2*self.dataRecordSize,1)    
            # Skips ambient and airflow path records.
            self.fp.seek(self.ambientSize+self.airflowPathSize,1)
            # Extract rows of data for node#, T, P, and D.
            temp = np.fromfile(self.fp,'f4',4*(self.header['nafnd']-1)).reshape((self.header['nafnd']-1),4)
            T.append(temp[:,1])
            P.append(temp[:,2])
            D.append(temp[:,3])
            self.fp.seek(self.contaminantNodeSize,1)

        # Places the data into a pandas dataframe, which is returned.
        return({'T': pd.DataFrame(data=T,columns=['afnd'+str(j+1) for j in range(self.header['nafnd']-1)],index=self.index), 
                'P': pd.DataFrame(data=P,columns=['afnd'+str(j+1) for j in range(self.header['nafnd']-1)],index=self.index), 
                'D': pd.DataFrame(data=D,columns=['afnd'+str(j+1) for j in range(self.header['nafnd']-1)],index=self.index)})
    
    def readContaminantNodes(self):
        """Function to read the contaminant node data at
            each time step in the CONTAM simulation (SIM) file.
        
        Written by  Von P. Walden, Washington State University
                    28 October 2016
                    26 March   2018 - Made vast improvements to speed by reading
                                        blocks of data using np.fromfile instead
                                        of decoding each value; duh...
        """
        import numpy  as np
        import pandas as pd
        
        # Reset the file pointer at the beginning of the data.
        self.fp.seek(self.startOfData)
        
        for ctm in range(self.header['nctm']): exec('ctm'+str(ctm+1)+' = []')
        for timeStep in range(self.header['numberOfTimeSteps']):
            if any(timeStep==self.dayChange):
                # Skips two full data records; 24th hour of day + Summary data
                self.fp.seek(2*self.dataRecordSize,1)    
            # Skips ambient, airflow path, and airflow node data records.
            self.fp.seek(self.ambientSize+self.airflowPathSize+self.airflowNodeSize,1)
            # Extract contaminant data for each contaminant node.
            temp = np.fromfile(self.fp,'f4',(1+self.header['nctm'])*(self.header['nccnd']-1)).reshape((self.header['nccnd']-1),1+self.header['nctm'])
            for ctm in range(self.header['nctm']):
                exec('ctm'+str(ctm+1)+'.append(temp[:,ctm+1])')
        # Create a dictionary of pandas dataframes.
        contaminants = {}
        for ctm in range(self.header['nctm']):    
            exec("ctm" + str(ctm+1) + " = pd.DataFrame(data=ctm" + str(ctm+1) + ",columns=['Cnd'+str(cnd+1) for cnd in range(self.header['nccnd']-1)], index=self.index)")
            exec("contaminants['ctm" + str(ctm+1) + "'] = ctm" + str(ctm+1))

        return(contaminants)
